#!/usr/bin/env python

import struct
import sys
import os

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
    import msvcrt
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

# Helper function that sends a message to the webapp.
def sendMessage(message):
    # Write message size.
    sys.stdout.write(struct.pack('I', len(message)))

    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()

def readMessage():
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)
    if len(text_length_bytes) == 0:
        sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')
    text = text.replace('"', '')

    sendMessage('{"Received": %s}' % text)

    cmd = ""
    if sys.platform == "darwin":
        cmd = """osascript -e 'tell app "Terminal" to activate' -e 'tell application "System Events" to keystroke "t" using {command down}'  -e 'delay 0.2'  -e 'tell application "Terminal" to activate' -e 'tell application "Terminal" to do script " """ + text + """ " in selected tab of the front window'"""
    elif sys.platform == "win32":
        cmd = "start /wait cmd /c " + text
    else:
        cmd = "x-terminal-emulator -e \"" + text + "\""

    os.system(cmd)

def main():
    readMessage()
    sys.exit(0)

if __name__ == '__main__':
    main()